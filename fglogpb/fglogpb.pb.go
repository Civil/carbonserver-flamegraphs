// Code generated by protoc-gen-gogo.
// source: fglogpb.proto
// DO NOT EDIT!

/*
	Package fglogpb is a generated protocol buffer package.

	It is generated from these files:
		fglogpb.proto

	It has these top-level messages:
		AccessLogger
*/
package fglogpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Version
type AccessLogger struct {
	Handler          string  `protobuf:"bytes,1,opt,name=Handler,proto3" json:"Handler,omitempty"`
	IsError          bool    `protobuf:"varint,2,opt,name=IsError,proto3" json:"IsError,omitempty"`
	Error            string  `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	Reason           string  `protobuf:"bytes,4,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Runtime          float64 `protobuf:"fixed64,5,opt,name=Runtime,proto3" json:"Runtime,omitempty"`
	PackagesReceived int64   `protobuf:"varint,6,opt,name=PackagesReceived,proto3" json:"PackagesReceived,omitempty"`
	BytesReceived    int64   `protobuf:"varint,7,opt,name=BytesReceived,proto3" json:"BytesReceived,omitempty"`
	Timestamp        int64   `protobuf:"varint,8,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Cluster          string  `protobuf:"bytes,9,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
	SourceServer     string  `protobuf:"bytes,10,opt,name=SourceServer,proto3" json:"SourceServer,omitempty"`
}

func (m *AccessLogger) Reset()                    { *m = AccessLogger{} }
func (m *AccessLogger) String() string            { return proto.CompactTextString(m) }
func (*AccessLogger) ProtoMessage()               {}
func (*AccessLogger) Descriptor() ([]byte, []int) { return fileDescriptorFglogpb, []int{0} }

func (m *AccessLogger) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *AccessLogger) GetIsError() bool {
	if m != nil {
		return m.IsError
	}
	return false
}

func (m *AccessLogger) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *AccessLogger) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AccessLogger) GetRuntime() float64 {
	if m != nil {
		return m.Runtime
	}
	return 0
}

func (m *AccessLogger) GetPackagesReceived() int64 {
	if m != nil {
		return m.PackagesReceived
	}
	return 0
}

func (m *AccessLogger) GetBytesReceived() int64 {
	if m != nil {
		return m.BytesReceived
	}
	return 0
}

func (m *AccessLogger) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AccessLogger) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *AccessLogger) GetSourceServer() string {
	if m != nil {
		return m.SourceServer
	}
	return ""
}

func init() {
	proto.RegisterType((*AccessLogger)(nil), "fglogpb.AccessLogger")
}
func (m *AccessLogger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessLogger) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Handler) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFglogpb(dAtA, i, uint64(len(m.Handler)))
		i += copy(dAtA[i:], m.Handler)
	}
	if m.IsError {
		dAtA[i] = 0x10
		i++
		if m.IsError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFglogpb(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFglogpb(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.Runtime != 0 {
		dAtA[i] = 0x29
		i++
		i = encodeFixed64Fglogpb(dAtA, i, uint64(math.Float64bits(float64(m.Runtime))))
	}
	if m.PackagesReceived != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFglogpb(dAtA, i, uint64(m.PackagesReceived))
	}
	if m.BytesReceived != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFglogpb(dAtA, i, uint64(m.BytesReceived))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFglogpb(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Cluster) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintFglogpb(dAtA, i, uint64(len(m.Cluster)))
		i += copy(dAtA[i:], m.Cluster)
	}
	if len(m.SourceServer) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintFglogpb(dAtA, i, uint64(len(m.SourceServer)))
		i += copy(dAtA[i:], m.SourceServer)
	}
	return i, nil
}

func encodeFixed64Fglogpb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Fglogpb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFglogpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AccessLogger) Size() (n int) {
	var l int
	_ = l
	l = len(m.Handler)
	if l > 0 {
		n += 1 + l + sovFglogpb(uint64(l))
	}
	if m.IsError {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovFglogpb(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovFglogpb(uint64(l))
	}
	if m.Runtime != 0 {
		n += 9
	}
	if m.PackagesReceived != 0 {
		n += 1 + sovFglogpb(uint64(m.PackagesReceived))
	}
	if m.BytesReceived != 0 {
		n += 1 + sovFglogpb(uint64(m.BytesReceived))
	}
	if m.Timestamp != 0 {
		n += 1 + sovFglogpb(uint64(m.Timestamp))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovFglogpb(uint64(l))
	}
	l = len(m.SourceServer)
	if l > 0 {
		n += 1 + l + sovFglogpb(uint64(l))
	}
	return n
}

func sovFglogpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFglogpb(x uint64) (n int) {
	return sovFglogpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccessLogger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFglogpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessLogger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessLogger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFglogpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFglogpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFglogpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsError = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFglogpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFglogpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFglogpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFglogpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Runtime = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackagesReceived", wireType)
			}
			m.PackagesReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFglogpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackagesReceived |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesReceived", wireType)
			}
			m.BytesReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFglogpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesReceived |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFglogpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFglogpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFglogpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFglogpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFglogpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceServer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFglogpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFglogpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFglogpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFglogpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFglogpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFglogpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFglogpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFglogpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFglogpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFglogpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFglogpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fglogpb.proto", fileDescriptorFglogpb) }

var fileDescriptorFglogpb = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xd1, 0x4a, 0xf3, 0x30,
	0x14, 0xc7, 0xc9, 0xf6, 0xad, 0x5d, 0x43, 0x07, 0x1f, 0x41, 0x24, 0x88, 0x94, 0x32, 0xbc, 0x28,
	0x82, 0xdb, 0x85, 0x4f, 0xe0, 0x44, 0x50, 0xf0, 0x42, 0x32, 0x5f, 0xa0, 0xcd, 0xce, 0x62, 0xb1,
	0x6d, 0x4a, 0x92, 0x0e, 0x7c, 0x33, 0x1f, 0xc1, 0x4b, 0x1f, 0x41, 0xfa, 0x24, 0xd2, 0xd3, 0x16,
	0x1d, 0xde, 0xe5, 0xf7, 0xfb, 0xff, 0x4f, 0x48, 0x0e, 0x5d, 0xec, 0x55, 0xa1, 0x55, 0x9d, 0xad,
	0x6a, 0xa3, 0x9d, 0x66, 0xfe, 0x80, 0x67, 0x57, 0x2a, 0x77, 0x2f, 0x4d, 0xb6, 0x92, 0xba, 0x5c,
	0x2b, 0xad, 0xf4, 0x1a, 0xf3, 0xac, 0xd9, 0x23, 0x21, 0xe0, 0xa9, 0x9f, 0x5b, 0xbe, 0x4f, 0x68,
	0x78, 0x23, 0x25, 0x58, 0xfb, 0xa8, 0x95, 0x02, 0xc3, 0x38, 0xf5, 0xef, 0xd3, 0x6a, 0x57, 0x80,
	0xe1, 0x24, 0x26, 0x49, 0x20, 0x46, 0xec, 0x92, 0x07, 0x7b, 0x67, 0x8c, 0x36, 0x7c, 0x12, 0x93,
	0x64, 0x2e, 0x46, 0x64, 0x27, 0x74, 0xd6, 0xfb, 0x29, 0x4e, 0xf4, 0xc0, 0x4e, 0xa9, 0x27, 0x20,
	0xb5, 0xba, 0xe2, 0xff, 0x50, 0x0f, 0xd4, 0xdd, 0x23, 0x9a, 0xca, 0xe5, 0x25, 0xf0, 0x59, 0x4c,
	0x12, 0x22, 0x46, 0x64, 0x97, 0xf4, 0xff, 0x53, 0x2a, 0x5f, 0x53, 0x05, 0x56, 0x80, 0x84, 0xfc,
	0x00, 0x3b, 0xee, 0xc5, 0x24, 0x99, 0x8a, 0x3f, 0x9e, 0x5d, 0xd0, 0xc5, 0xe6, 0xcd, 0xfd, 0x2a,
	0xfa, 0x58, 0x3c, 0x96, 0xec, 0x9c, 0x06, 0xcf, 0x79, 0x09, 0xd6, 0xa5, 0x65, 0xcd, 0xe7, 0xd8,
	0xf8, 0x11, 0xdd, 0x4b, 0x6e, 0x8b, 0xc6, 0x3a, 0x30, 0x3c, 0xe8, 0xff, 0x3a, 0x20, 0x5b, 0xd2,
	0x70, 0xab, 0x1b, 0x23, 0x61, 0x0b, 0xe6, 0x00, 0x86, 0x53, 0x8c, 0x8f, 0xdc, 0x26, 0xfc, 0x68,
	0x23, 0xf2, 0xd9, 0x46, 0xe4, 0xab, 0x8d, 0x48, 0xe6, 0xe1, 0x3e, 0xaf, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xc7, 0xc6, 0x47, 0xc1, 0x98, 0x01, 0x00, 0x00,
}
