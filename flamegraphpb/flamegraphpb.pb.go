// Code generated by protoc-gen-gogo.
// source: flamegraphpb.proto
// DO NOT EDIT!

/*
	Package flamegraphpb is a generated protocol buffer package.

	It is generated from these files:
		flamegraphpb.proto

	It has these top-level messages:
		ProtocolVersionResponse
		FlameGraph
		FlameGraphNode
		MetricInfo
		MultiMetricStats
*/
package flamegraphpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ProtocolVersionResponse struct {
	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *ProtocolVersionResponse) Reset()         { *m = ProtocolVersionResponse{} }
func (m *ProtocolVersionResponse) String() string { return proto.CompactTextString(m) }
func (*ProtocolVersionResponse) ProtoMessage()    {}
func (*ProtocolVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorFlamegraphpb, []int{0}
}

func (m *ProtocolVersionResponse) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type FlameGraph struct {
	Timestamp int64           `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Cluster   string          `protobuf:"bytes,2,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
	Server    string          `protobuf:"bytes,3,opt,name=Server,proto3" json:"Server,omitempty"`
	Tree      *FlameGraphNode `protobuf:"bytes,4,opt,name=Tree" json:"Tree,omitempty"`
}

func (m *FlameGraph) Reset()                    { *m = FlameGraph{} }
func (m *FlameGraph) String() string            { return proto.CompactTextString(m) }
func (*FlameGraph) ProtoMessage()               {}
func (*FlameGraph) Descriptor() ([]byte, []int) { return fileDescriptorFlamegraphpb, []int{1} }

func (m *FlameGraph) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FlameGraph) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *FlameGraph) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *FlameGraph) GetTree() *FlameGraphNode {
	if m != nil {
		return m.Tree
	}
	return nil
}

type FlameGraphNode struct {
	Id          uint64            `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Total       uint64            `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	Value       uint64            `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
	ModTime     int64             `protobuf:"varint,5,opt,name=ModTime,proto3" json:"ModTime,omitempty"`
	RdTime      int64             `protobuf:"varint,6,opt,name=RdTime,proto3" json:"RdTime,omitempty"`
	ATime       int64             `protobuf:"varint,7,opt,name=ATime,proto3" json:"ATime,omitempty"`
	Count       uint64            `protobuf:"varint,8,opt,name=Count,proto3" json:"Count,omitempty"`
	Children    []*FlameGraphNode `protobuf:"bytes,9,rep,name=Children" json:"Children,omitempty"`
	ChildrenIds []uint64          `protobuf:"varint,10,rep,packed,name=ChildrenIds" json:"ChildrenIds,omitempty"`
	ParentID    uint64            `protobuf:"varint,11,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
}

func (m *FlameGraphNode) Reset()                    { *m = FlameGraphNode{} }
func (m *FlameGraphNode) String() string            { return proto.CompactTextString(m) }
func (*FlameGraphNode) ProtoMessage()               {}
func (*FlameGraphNode) Descriptor() ([]byte, []int) { return fileDescriptorFlamegraphpb, []int{2} }

func (m *FlameGraphNode) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FlameGraphNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FlameGraphNode) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *FlameGraphNode) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *FlameGraphNode) GetModTime() int64 {
	if m != nil {
		return m.ModTime
	}
	return 0
}

func (m *FlameGraphNode) GetRdTime() int64 {
	if m != nil {
		return m.RdTime
	}
	return 0
}

func (m *FlameGraphNode) GetATime() int64 {
	if m != nil {
		return m.ATime
	}
	return 0
}

func (m *FlameGraphNode) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FlameGraphNode) GetChildren() []*FlameGraphNode {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *FlameGraphNode) GetChildrenIds() []uint64 {
	if m != nil {
		return m.ChildrenIds
	}
	return nil
}

func (m *FlameGraphNode) GetParentID() uint64 {
	if m != nil {
		return m.ParentID
	}
	return 0
}

type MetricInfo struct {
	Path    string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	ModTime int64  `protobuf:"varint,2,opt,name=ModTime,proto3" json:"ModTime,omitempty"`
	ATime   int64  `protobuf:"varint,3,opt,name=ATime,proto3" json:"ATime,omitempty"`
	RdTime  int64  `protobuf:"varint,4,opt,name=RdTime,proto3" json:"RdTime,omitempty"`
	Size_   int64  `protobuf:"varint,5,opt,name=Size,proto3" json:"Size,omitempty"`
	Count   int64  `protobuf:"varint,6,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *MetricInfo) Reset()                    { *m = MetricInfo{} }
func (m *MetricInfo) String() string            { return proto.CompactTextString(m) }
func (*MetricInfo) ProtoMessage()               {}
func (*MetricInfo) Descriptor() ([]byte, []int) { return fileDescriptorFlamegraphpb, []int{3} }

func (m *MetricInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MetricInfo) GetModTime() int64 {
	if m != nil {
		return m.ModTime
	}
	return 0
}

func (m *MetricInfo) GetATime() int64 {
	if m != nil {
		return m.ATime
	}
	return 0
}

func (m *MetricInfo) GetRdTime() int64 {
	if m != nil {
		return m.RdTime
	}
	return 0
}

func (m *MetricInfo) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *MetricInfo) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MultiMetricStats struct {
	Timestamp int64        `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Cluster   string       `protobuf:"bytes,2,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
	Server    string       `protobuf:"bytes,3,opt,name=Server,proto3" json:"Server,omitempty"`
	Metrics   []MetricInfo `protobuf:"bytes,4,rep,name=metrics" json:"metrics"`
}

func (m *MultiMetricStats) Reset()                    { *m = MultiMetricStats{} }
func (m *MultiMetricStats) String() string            { return proto.CompactTextString(m) }
func (*MultiMetricStats) ProtoMessage()               {}
func (*MultiMetricStats) Descriptor() ([]byte, []int) { return fileDescriptorFlamegraphpb, []int{4} }

func (m *MultiMetricStats) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MultiMetricStats) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *MultiMetricStats) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *MultiMetricStats) GetMetrics() []MetricInfo {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func init() {
	proto.RegisterType((*ProtocolVersionResponse)(nil), "flamegraphpb.ProtocolVersionResponse")
	proto.RegisterType((*FlameGraph)(nil), "flamegraphpb.FlameGraph")
	proto.RegisterType((*FlameGraphNode)(nil), "flamegraphpb.FlameGraphNode")
	proto.RegisterType((*MetricInfo)(nil), "flamegraphpb.MetricInfo")
	proto.RegisterType((*MultiMetricStats)(nil), "flamegraphpb.MultiMetricStats")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FlamegraphV1 service

type FlamegraphV1Client interface {
	GetVersion(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ProtocolVersionResponse, error)
	SendFlamegraph(ctx context.Context, in *FlameGraph, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	SendMetricsStats(ctx context.Context, in *MultiMetricStats, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type flamegraphV1Client struct {
	cc *grpc.ClientConn
}

func NewFlamegraphV1Client(cc *grpc.ClientConn) FlamegraphV1Client {
	return &flamegraphV1Client{cc}
}

func (c *flamegraphV1Client) GetVersion(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ProtocolVersionResponse, error) {
	out := new(ProtocolVersionResponse)
	err := grpc.Invoke(ctx, "/flamegraphpb.FlamegraphV1/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flamegraphV1Client) SendFlamegraph(ctx context.Context, in *FlameGraph, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/flamegraphpb.FlamegraphV1/SendFlamegraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flamegraphV1Client) SendMetricsStats(ctx context.Context, in *MultiMetricStats, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/flamegraphpb.FlamegraphV1/SendMetricsStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FlamegraphV1 service

type FlamegraphV1Server interface {
	GetVersion(context.Context, *google_protobuf1.Empty) (*ProtocolVersionResponse, error)
	SendFlamegraph(context.Context, *FlameGraph) (*google_protobuf1.Empty, error)
	SendMetricsStats(context.Context, *MultiMetricStats) (*google_protobuf1.Empty, error)
}

func RegisterFlamegraphV1Server(s *grpc.Server, srv FlamegraphV1Server) {
	s.RegisterService(&_FlamegraphV1_serviceDesc, srv)
}

func _FlamegraphV1_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlamegraphV1Server).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flamegraphpb.FlamegraphV1/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlamegraphV1Server).GetVersion(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlamegraphV1_SendFlamegraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlameGraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlamegraphV1Server).SendFlamegraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flamegraphpb.FlamegraphV1/SendFlamegraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlamegraphV1Server).SendFlamegraph(ctx, req.(*FlameGraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlamegraphV1_SendMetricsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiMetricStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlamegraphV1Server).SendMetricsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flamegraphpb.FlamegraphV1/SendMetricsStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlamegraphV1Server).SendMetricsStats(ctx, req.(*MultiMetricStats))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlamegraphV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flamegraphpb.FlamegraphV1",
	HandlerType: (*FlamegraphV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _FlamegraphV1_GetVersion_Handler,
		},
		{
			MethodName: "SendFlamegraph",
			Handler:    _FlamegraphV1_SendFlamegraph_Handler,
		},
		{
			MethodName: "SendMetricsStats",
			Handler:    _FlamegraphV1_SendMetricsStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flamegraphpb.proto",
}

func (m *ProtocolVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *FlameGraph) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlameGraph) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Cluster) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(len(m.Cluster)))
		i += copy(dAtA[i:], m.Cluster)
	}
	if len(m.Server) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(len(m.Server)))
		i += copy(dAtA[i:], m.Server)
	}
	if m.Tree != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.Tree.Size()))
		n1, err := m.Tree.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *FlameGraphNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlameGraphNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Total != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.Total))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.Value))
	}
	if m.ModTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.ModTime))
	}
	if m.RdTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.RdTime))
	}
	if m.ATime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.ATime))
	}
	if m.Count != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.Count))
	}
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintFlamegraphpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ChildrenIds) > 0 {
		dAtA3 := make([]byte, len(m.ChildrenIds)*10)
		var j2 int
		for _, num := range m.ChildrenIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.ParentID != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.ParentID))
	}
	return i, nil
}

func (m *MetricInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.ModTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.ModTime))
	}
	if m.ATime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.ATime))
	}
	if m.RdTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.RdTime))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.Size_))
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *MultiMetricStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiMetricStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Cluster) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(len(m.Cluster)))
		i += copy(dAtA[i:], m.Cluster)
	}
	if len(m.Server) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFlamegraphpb(dAtA, i, uint64(len(m.Server)))
		i += copy(dAtA[i:], m.Server)
	}
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			dAtA[i] = 0x22
			i++
			i = encodeVarintFlamegraphpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Flamegraphpb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Flamegraphpb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFlamegraphpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProtocolVersionResponse) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.Version))
	}
	return n
}

func (m *FlameGraph) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.Timestamp))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovFlamegraphpb(uint64(l))
	}
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovFlamegraphpb(uint64(l))
	}
	if m.Tree != nil {
		l = m.Tree.Size()
		n += 1 + l + sovFlamegraphpb(uint64(l))
	}
	return n
}

func (m *FlameGraphNode) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFlamegraphpb(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.Total))
	}
	if m.Value != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.Value))
	}
	if m.ModTime != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.ModTime))
	}
	if m.RdTime != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.RdTime))
	}
	if m.ATime != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.ATime))
	}
	if m.Count != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.Count))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovFlamegraphpb(uint64(l))
		}
	}
	if len(m.ChildrenIds) > 0 {
		l = 0
		for _, e := range m.ChildrenIds {
			l += sovFlamegraphpb(uint64(e))
		}
		n += 1 + sovFlamegraphpb(uint64(l)) + l
	}
	if m.ParentID != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.ParentID))
	}
	return n
}

func (m *MetricInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFlamegraphpb(uint64(l))
	}
	if m.ModTime != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.ModTime))
	}
	if m.ATime != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.ATime))
	}
	if m.RdTime != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.RdTime))
	}
	if m.Size_ != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.Size_))
	}
	if m.Count != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.Count))
	}
	return n
}

func (m *MultiMetricStats) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovFlamegraphpb(uint64(m.Timestamp))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovFlamegraphpb(uint64(l))
	}
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovFlamegraphpb(uint64(l))
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovFlamegraphpb(uint64(l))
		}
	}
	return n
}

func sovFlamegraphpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFlamegraphpb(x uint64) (n int) {
	return sovFlamegraphpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProtocolVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlamegraphpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlamegraphpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlameGraph) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlamegraphpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlameGraph: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlameGraph: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tree == nil {
				m.Tree = &FlameGraphNode{}
			}
			if err := m.Tree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlamegraphpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlameGraphNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlamegraphpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlameGraphNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlameGraphNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModTime", wireType)
			}
			m.ModTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdTime", wireType)
			}
			m.RdTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ATime", wireType)
			}
			m.ATime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ATime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &FlameGraphNode{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlamegraphpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChildrenIds = append(m.ChildrenIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlamegraphpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFlamegraphpb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlamegraphpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChildrenIds = append(m.ChildrenIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildrenIds", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			m.ParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlamegraphpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlamegraphpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModTime", wireType)
			}
			m.ModTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ATime", wireType)
			}
			m.ATime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ATime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdTime", wireType)
			}
			m.RdTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlamegraphpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiMetricStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlamegraphpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiMetricStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiMetricStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, MetricInfo{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlamegraphpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFlamegraphpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlamegraphpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlamegraphpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlamegraphpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFlamegraphpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFlamegraphpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFlamegraphpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFlamegraphpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlamegraphpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("flamegraphpb.proto", fileDescriptorFlamegraphpb) }

var fileDescriptorFlamegraphpb = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0xb6, 0xec, 0x8d, 0x7f, 0xc6, 0xc6, 0x84, 0xa5, 0xa4, 0x8b, 0x1b, 0x5c, 0x21, 0x28, 0xf8,
	0x52, 0xa5, 0x4d, 0x2e, 0xb9, 0x36, 0x4e, 0x13, 0x0c, 0x75, 0x30, 0x6b, 0xe3, 0xbb, 0x6c, 0xad,
	0x65, 0x81, 0xa4, 0x15, 0xd2, 0x2a, 0xd0, 0x3e, 0x44, 0x0f, 0x3d, 0xf7, 0x39, 0xfa, 0x0c, 0x39,
	0xf6, 0x09, 0x4a, 0xf1, 0x1b, 0xf4, 0x0d, 0xca, 0xee, 0x4a, 0x96, 0x15, 0x30, 0xbd, 0xf4, 0x36,
	0xdf, 0x37, 0xb3, 0x33, 0xf3, 0x7d, 0xec, 0x00, 0xde, 0x04, 0x4e, 0xc8, 0xbc, 0xc4, 0x89, 0xb7,
	0xf1, 0xca, 0x8e, 0x13, 0x2e, 0x38, 0xee, 0x1d, 0x72, 0x83, 0xb7, 0x9e, 0x2f, 0xb6, 0xd9, 0xca,
	0x5e, 0xf3, 0xf0, 0xc2, 0xe3, 0x1e, 0xbf, 0x50, 0x45, 0xab, 0x6c, 0xa3, 0x90, 0x02, 0x2a, 0xd2,
	0x8f, 0x07, 0xaf, 0x3c, 0xce, 0xbd, 0x80, 0x95, 0x55, 0x2c, 0x8c, 0xc5, 0x67, 0x9d, 0xb4, 0xae,
	0xe0, 0xe5, 0x4c, 0x06, 0x6b, 0x1e, 0x2c, 0x59, 0x92, 0xfa, 0x3c, 0xa2, 0x2c, 0x8d, 0x79, 0x94,
	0x32, 0x4c, 0xa0, 0xf5, 0xa8, 0x29, 0x62, 0x98, 0xc6, 0xa8, 0x41, 0x0b, 0x68, 0x7d, 0x35, 0x00,
	0xee, 0xe4, 0x46, 0xf7, 0x72, 0x23, 0x7c, 0x0e, 0x9d, 0x85, 0x1f, 0xb2, 0x54, 0x38, 0x61, 0x9c,
	0x97, 0x96, 0x84, 0x6c, 0x33, 0x0e, 0xb2, 0x54, 0xb0, 0x84, 0xd4, 0x4d, 0x63, 0xd4, 0xa1, 0x05,
	0xc4, 0x67, 0xd0, 0x9c, 0xb3, 0xe4, 0x91, 0x25, 0xa4, 0xa1, 0x12, 0x39, 0xc2, 0xef, 0x00, 0x2d,
	0x12, 0xc6, 0x08, 0x32, 0x8d, 0x51, 0xf7, 0xf2, 0xdc, 0xae, 0x18, 0x52, 0xce, 0x7d, 0xe0, 0x2e,
	0xa3, 0xaa, 0xd2, 0xfa, 0x51, 0x87, 0x7e, 0x35, 0x81, 0xfb, 0x50, 0x9f, 0xb8, 0x6a, 0x1b, 0x44,
	0xeb, 0x13, 0x17, 0x63, 0x40, 0x0f, 0x4e, 0xc8, 0xf2, 0x1d, 0x54, 0x8c, 0x5f, 0xc0, 0xc9, 0x82,
	0x0b, 0x27, 0x50, 0xf3, 0x11, 0xd5, 0x40, 0xb2, 0x4b, 0x27, 0xc8, 0xf4, 0x7c, 0x44, 0x35, 0x90,
	0x32, 0xa6, 0xdc, 0x95, 0xb2, 0xc8, 0x89, 0x76, 0x23, 0x87, 0x52, 0x06, 0xd5, 0x89, 0xa6, 0x4a,
	0xe4, 0x48, 0xf6, 0xf9, 0xa0, 0xe8, 0x96, 0xa2, 0x35, 0x90, 0xec, 0x98, 0x67, 0x91, 0x20, 0x6d,
	0xdd, 0x5d, 0x01, 0x7c, 0x0d, 0xed, 0xf1, 0xd6, 0x0f, 0xdc, 0x84, 0x45, 0xa4, 0x63, 0x36, 0xfe,
	0x29, 0x7b, 0x5f, 0x8d, 0x4d, 0xe8, 0x16, 0xf1, 0xc4, 0x4d, 0x09, 0x98, 0x8d, 0x11, 0xa2, 0x87,
	0x14, 0x1e, 0x40, 0x7b, 0xe6, 0x24, 0x2c, 0x12, 0x93, 0x5b, 0xd2, 0x55, 0x43, 0xf7, 0xd8, 0xfa,
	0x66, 0x00, 0x4c, 0x99, 0x48, 0xfc, 0xf5, 0x24, 0xda, 0x70, 0x69, 0xd2, 0xcc, 0x11, 0x5b, 0x65,
	0x5b, 0x87, 0xaa, 0xf8, 0x50, 0x78, 0xbd, 0x2a, 0x7c, 0x2f, 0xb0, 0x71, 0x28, 0xb0, 0xb4, 0x03,
	0x55, 0xec, 0xc0, 0x80, 0xe6, 0xfe, 0x97, 0xc2, 0x3d, 0x15, 0x97, 0x66, 0x68, 0xe7, 0x34, 0xb0,
	0xbe, 0x1b, 0x70, 0x3a, 0xcd, 0x02, 0xe1, 0xeb, 0xcd, 0xe6, 0xc2, 0x11, 0xe9, 0x7f, 0xff, 0x64,
	0xd7, 0xd0, 0x0a, 0x55, 0xfb, 0x94, 0x20, 0x65, 0x38, 0xa9, 0x1a, 0x5e, 0xba, 0x72, 0x83, 0x9e,
	0x7e, 0xbd, 0xae, 0xd1, 0xa2, 0xfc, 0xf2, 0x8f, 0x01, 0xbd, 0xbb, 0x7d, 0xe9, 0xf2, 0x3d, 0x9e,
	0x02, 0xdc, 0x33, 0x91, 0x9f, 0x0f, 0x3e, 0xb3, 0xf5, 0xbd, 0xd9, 0xc5, 0xbd, 0xd9, 0x1f, 0xe5,
	0xbd, 0x0d, 0xde, 0x54, 0xfb, 0x1f, 0xb9, 0x3a, 0xab, 0x86, 0x6f, 0xa1, 0x3f, 0x67, 0x91, 0x5b,
	0x8e, 0xc0, 0xe4, 0xd8, 0x5f, 0x18, 0x1c, 0x19, 0x66, 0xd5, 0xf0, 0x27, 0x38, 0x95, 0x5d, 0xb4,
	0x8c, 0x54, 0x7b, 0x38, 0x7c, 0x26, 0xf1, 0x99, 0xc7, 0xc7, 0xbb, 0xdd, 0xf4, 0x9e, 0x76, 0x43,
	0xe3, 0xe7, 0x6e, 0x68, 0xfc, 0xde, 0x0d, 0x8d, 0x55, 0x53, 0xe5, 0xaf, 0xfe, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x05, 0x25, 0x82, 0xe9, 0xab, 0x04, 0x00, 0x00,
}
